import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class CrossyRoadGame extends JFrame {

    // Spielfigur
    private int playerX = 200;
    private int playerY = 400;
    private final int playerSize = 30;

    // Hindernisse
    private int obstacleY = -30;  // Position des Hindernisses
    private final int obstacleSpeed = 5;

    // Timer für das Spielupdate
    private Timer gameTimer;

    public CrossyRoadGame() {
        // Fenster-Einstellungen
        setTitle("Crossy Road");
        setSize(400, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Fenster in der Mitte des Bildschirms
        setResizable(false);

        // KeyListener für die Steuerung der Spielfigur
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                    if (playerX > 0) playerX -= 10; // Bewegung nach links
                } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                    if (playerX < getWidth() - playerSize) playerX += 10; // Bewegung nach rechts
                } else if (e.getKeyCode() == KeyEvent.VK_UP) {
                    if (playerY > 0) playerY -= 10; // Bewegung nach oben
                } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    if (playerY < getHeight() - playerSize) playerY += 10; // Bewegung nach unten
                }
            }
        });

        // Timer für die Spielaktualisierung (Hindernisbewegung, Spielanzeige)
        gameTimer = new Timer(20, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Hindernis bewegen
                obstacleY += obstacleSpeed;
                if (obstacleY > getHeight()) {
                    obstacleY = -30; // Hindernis oben wieder erscheinen lassen
                }

                // Überprüfen, ob das Hindernis die Spielfigur getroffen hat
                if (new Rectangle(playerX, playerY, playerSize, playerSize)
                        .intersects(new Rectangle(150, obstacleY, 100, 30))) {
                    // Wenn es eine Kollision gibt, beende das Spiel
                    gameTimer.stop();
                    JOptionPane.showMessageDialog(null, "Game Over!");
                }

                repaint(); // Spielfeld neu zeichnen
            }
        });
        gameTimer.start(); // Timer starten
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        // Spielfigur zeichnen
        g.setColor(Color.BLUE);
        g.fillRect(playerX, playerY, playerSize, playerSize);

        // Hindernis zeichnen
        g.setColor(Color.RED);
        g.fillRect(150, obstacleY, 100, 30);
    }

    public static void main(String[] args) {
        // Spiel starten
        SwingUtilities.invokeLater(() -> {
            CrossyRoadGame game = new CrossyRoadGame();
            game.setVisible(true);
        });
    }
}
